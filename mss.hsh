# Author: Caio Raposo
# Date: 2022-09-09
# Description: Calculates the maximum subarray sum, and uses memoization to run
# in time complexity O(n) instead of O(nÂ²), where n is the array length. 
# Example: v = [-25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4]
# Solution: v[5..8] = [18, 20, -7, 12]
# Reference: Introduction to Algorithms 3ed, Cormen et al, pages 68 and 387.

let util = std.import("util.hsh")
let args = std.args()

let n = std.int(args[0])
let v = []

let outfile = args[1]

function max(n, m, o)
	if n >= m and n >= o then
		n
	elseif m >= n and m >= o then
		m
	else
		o
	end
end

memo function mss(v, i)
	if i == 0 and v[0] < 0 then
		0
	elseif i == 0 then
		v[0]
	else
		max(mss(v, i-1), mss(v, i-1) + v[i], v[i])
	end
end

{ echo n,time,fn > $outfile } # csv header
for i in std.range(0, n, 1) do
	v = util.shuf(-30, 30, i+1)
	let t = util.time_ns()
	let r = mss(v, i)
	t = (util.time_ns() - t)
	std.println(i, t, r)
	{ echo $i,$t,$r >> $outfile }
end
