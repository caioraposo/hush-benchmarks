let util = std.import("util.hsh")

let n = 100
let v = util.shuf(1, 30, n)

function max(n, m, o)
	if n >= m and n >= o then
		n
	elseif m >= n and m >= o then
		m
	else
		o
	end
end

memo function mss(i)
	if i == -1 then
		0
	else
		max(mss(i-1), mss(i-1) + v[i], v[i])
	end
end

let table = @[]
function tmss(i)
	if i == -1 then
		0
	elseif std.contains(table, i) then
		table[i]
	else
		table[i] = max(mss(i-1), mss(i-1) + v[i], v[i])
		table[i]
	end
end

function run_test(f, n, file)
	${ echo n,time,fn > $file } # csv header
	for i in std.range(0, n, 1) do
		table = @[]
		let t = util.time_ns()
		let r = f(i)
		t = (util.time_ns() - t) / 1000000
		${ echo $i,$t,$r >> $file }
	end
end

run_test(mss, n, "data/mss/mss-memo.csv")
run_test(tmss, n, "data/mss/mss-hand-memo.csv")
