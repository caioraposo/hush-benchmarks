let util = std.import("util.hsh")

let n = 30

function min(a, b, c)
    if a <= b and a <= c then
        return a
    end
    if b <= a and b <= c then
        return b
    end
    c
end

memo function lev(a, b)
    if std.len(b) == 0 then
        std.len(a)
    elseif std.len(a) == 0 then
        std.len(b)
    elseif a[0] == b[0] then
        lev(std.substr(a, 1, std.len(a)-1), std.substr(b, 1, std.len(b)-1))
    else
    	1 + min(lev(std.substr(a, 1, std.len(a)-1), b), lev(a, std.substr(b, 1, std.len(b)-1)), lev(std.substr(a, 1, std.len(a)-1), std.substr(b, 1, std.len(b)-1)))
    end
end

let table = @[]
function tlev(a, b)
    if std.len(b) == 0 then
        return std.len(a)
    elseif std.len(a) == 0 then
        return std.len(b)
    elseif std.contains(table, [a, b]) then
    	return table[[a, b]]
    elseif a[0] == b[0] then
        table[[a, b]] = tlev(std.substr(a, 0, std.len(a)-1), std.substr(b, 0, std.len(b)-1))
    else
    	table[[a, b]] = 1 + min(tlev(std.substr(a, 0, std.len(a)-1), b), tlev(a, std.substr(b, 0, std.len(b)-1)), tlev(std.substr(a, 0, std.len(a)-1), std.substr(b, 0, std.len(b)-1)))
    end
    table[[a, b]]
end

function run_test(f, n, file)
	${ echo n,time,fn > $file } # csv header
	for i in std.range(0, n, 1) do
		table = @[]
		let t = util.time_ns()
		# Generate random strings each time
		let s1 = util.get_random_str(n)
		let s2 = util.get_random_str(n)
	    let r = f(s1, s2)
	    t = (util.time_ns() - t) / 1000000
	    ${ echo $i,$t,$r >> $file }
	end
end

run_test(lev, n, "data/leven/lev-memo.csv")
run_test(tlev, n, "data/leven/lev-hand-memo.csv")
