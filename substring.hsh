# Author: Caio Raposo
# Date: 2022-09-09
# Description: Given two strings, this algorithm finds the number of times the
# second string occurs in the first string, whether continuously or
# discontinuously. With memoization, it has time complexity of O(MN) where M is
# the size of the first string, and N the second.
# Reference: https://www.geeksforgeeks.org/find-number-times-string-occurs-given-string/

let util = std.import("util.hsh")
let args = std.args()

let a = ${ cat data/rna.txt }.stdout
let b = "GATCGCCATTATTTTGGCATCTTTTTCTGACTATGCATGCAGCTACGACHTACACTACATACATCA"
let n = std.int(args[0])

memo function sub(m, n)
	if (m == 0 and n == 0) or n == 0 then
		return 1
	elseif m == 0 then
		return 0
	end

	if a[m - 1] == b[n - 1] then
		sub(m - 1, n - 1) + sub(m - 1, n)
	else
		sub(m - 1, n)
	end
end

let table = @[]
function tsub(m, n)
	if (m == 0 and n == 0) or n == 0 then
		return 1
	elseif m == 0 then
		return 0
	elseif std.contains(table, [m, n]) then
		return table[[m, n]]
	end

	if a[m - 1] == b[n - 1] then
		table[[m, n]] = tsub(m - 1, n - 1) + tsub(m - 1, n)
	else
		table[[m, n]] = tsub(m - 1, n)
	end
	table[[m, n]]
end

# Note that the cached results are reused throughout multiple executions.
# 'table' is also not reseted.
for i in std.range(1, n, 1) do
	b = util.get_random_str(n)
	let t = util.time_ns()
	let r = tsub(std.len(a), n)
	t = (util.time_ns() - t) / 1000000
	{ echo $i,$t,$r }
end
