# Author: Caio Raposo
# Date: 2022-09-09
# Description: This program computes the Levenshtein distance, which is a string
# metric for measuring the difference between two sequences.
# This implementation has time complexity of O(nÂ²).
# References: https://users.monash.edu/~lloyd/tildeAlgDS/Dynamic/Edit/

let util = std.import("../../util.hsh")
let args = std.args()
std.randseed(0)

let N = std.int(args[0])

function min(a, b, c)
	if a <= b and a <= c then
		return a
	end
	if b <= a and b <= c then
		return b
	end
	c
end

function tail(s)
	std.substr(s, 1, std.len(s)-1)
end

function lev(a, b)
	if std.len(b) == 0 then
		std.len(a)
	elseif std.len(a) == 0 then
		std.len(b)
	elseif a[0] == b[0] then
		lev(tail(a), tail(b))
	else
		1 + min(lev(tail(a), b), lev(a, tail(b)), lev(tail(a), tail(b)))
	end
end

function get_random_str(n)
	let str = ""
	let letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	for _ in std.range(0, n, 1) do
		str = str ++ std.to_string(letters[std.randint(0, 51)])
	end
	str
end

let s1 = get_random_str(N)
let s2 = get_random_str(N)
std.println(lev(s1, s2))