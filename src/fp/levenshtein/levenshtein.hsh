# Author: Caio Raposo
# Date: 2022-09-09
# Description: This program computes the Levenshtein distance, which is a string
# metric for measuring the difference between two sequences.
# This implementation has time complexity of O(nÂ²).
# References: https://users.monash.edu/~lloyd/tildeAlgDS/Dynamic/Edit/

let util = std.import("../../util.hsh")
let args = std.args()

let n = std.int(args[0])
let m = std.int(args[1])
let o = std.int(args[2])

function min(a, b, c)
	if a <= b and a <= c then
		return a
	end
	if b <= a and b <= c then
		return b
	end
	c
end

function tail(s)
	std.substr(s, 1, std.len(s)-1)
end

memo function lev(a, b)
	if std.len(b) == 0 then
		std.len(a)
	elseif std.len(a) == 0 then
		std.len(b)
	elseif a[0] == b[0] then
		lev(tail(a), tail(b))
	else
		1 + min(lev(tail(a), b), lev(a, tail(b)), lev(tail(a), tail(b)))
	end
end

let table = @[]
function tlev(a, b)
	if std.len(b) == 0 then
		return std.len(a)
	elseif std.len(a) == 0 then
		return std.len(b)
	elseif std.contains(table, [a, b]) then
		return table[[a, b]]
	elseif a[0] == b[0] then
		table[[a, b]] = tlev(tail(a), tail(b))
	else
		table[[a, b]] = 1 + min(tlev(tail(a), b), tlev(a, tail(b)), tlev(tail(a), tail(b)))
	end
	table[[a, b]]
end

std.println("n,time(ms),lev(n)")
for i in std.range(n, m, o) do
	# Generate random strings each time
	let s1 = util.get_random_str(i)
	let s2 = util.get_random_str(i)
	let t = util.time_ns()
	let r = lev(s1, s2)
	t = (util.time_ns() - t) / 1000000 # ns to ms
	{ echo $i,$t,$r }
end
