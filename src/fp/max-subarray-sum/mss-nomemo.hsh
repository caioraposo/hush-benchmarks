# Author: Caio Raposo
# Date: 2022-09-09
# Description: Calculates the maximum subarray sum, and uses memoization to run
# in time complexity O(n) instead of O(nÂ²), where n is the array length. 
# Example: v = [-25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4]
# Solution: v[5..8] = [18, 20, -7, 12]
# Reference: Introduction to Algorithms 3ed, Cormen et al, pages 68 and 387.

let util = std.import("../../util.hsh")
let args = std.args()
std.randseed(0)

let N = std.int(args[0])

function max(a, b)
	if a >= b then
		a
	else
		b
	end
end

let v = []
function mss(i)
	if i == 0 then
		v[0]
	else
		max(mss(i-1) + v[i], v[i])
	end
end

let ans = 0
for i in std.range(0, N, 1) do
	std.push(v, std.randint(-30, 30))
	ans = max(ans, mss(i))
end

std.println(ans)
