# Author: Caio Raposo
# Date: 2022-09-09
# Description: This is an implementation of a solution to the classic Knapsack
# Problem on O(nC), where n is the number of different items, and C is the
# total capacity of the knapsack. The solution uses dynamic programming to
# memoize subproblems, and thus compose the solution to each problem.
# References: Algorithms, Dasgupta et al, page 171.

let util = std.import("../../util.hsh")
let args = std.args()

# Capacity and number of elements
let C = std.int(args[0])
let N = std.int(args[1])

# The values and weights will be defined and captured by the functions later.
let v = []
let w = []

function max(a, b)
	if a >= b then
		a
	else
		b
	end
end

function knapsack(c, n)
	if c == 0 or n == 0 then
		0
	elseif w[n-1] > c then
		knapsack(c, n-1)
	else
		max(v[n-1] + knapsack(c-w[n-1], n-1), knapsack(c, n-1))
	end
end

# set value and weight of each item
for _ in std.range(0, N, 1) do
	std.push(v, std.randint(0, 100))
	std.push(w, std.randint(0, 100))
end

std.println(knapsack(C, N))