# Author: Caio Raposo
# Date: 2022-09-09
# Description: This is an implementation of a solution to the classic Knapsack
# Problem on O(nC), where n is the number of different items, and C is the
# total capacity of the knapsack. The solution uses dynamic programming to
# memoize subproblems, and thus compose the solution to each problem.
# References: Algorithms, Dasgupta et al, page 171.

let util = std.import("../../util.hsh")
let args = std.args()

# Number of elements and capacity
let n = std.int(args[0])
let C = std.int(args[1])

# The values and weights will be defined and captured by the functions later.
let v = []
let w = []

function max(a, b)
	if a >= b then
		a
	else
		b
	end
end

memo function knapsack(c, n)
	if c == 0 or n == 0 then
		0
	elseif w[n-1] > c then
		knapsack(c, n-1)
	else
		max(v[n-1] + knapsack(c-w[n-1], n-1), knapsack(c, n-1))
	end
end

let table = @[]
function tknapsack(c, n)
	if c == 0 or n == 0 then
		return 0
	elseif std.contains(table, [c, n]) then
		return table[[c, n]]
	end

	if w[n-1] > c then
		table[[c, n]] = tknapsack(c, n-1)
	else
		table[[c, n]] = max(v[n-1] + tknapsack(c-w[n-1], n-1), tknapsack(c, n-1))
	end
	table[[c, n]]
end

std.println("n,time(μs),knapsack(n)") # csv header
for i in std.range(1, n+1, 1) do
	# Get random values [0..100] and weights for the elements
	v = util.shuf(0, 100, i)
	w = util.shuf(0, 100, i)
	let t = util.time_ns()
	let r = tknapsack(C, i)
	t = (util.time_ns() - t) / 1000 # ns to μs
	{ echo $i,$t,$r }
end
