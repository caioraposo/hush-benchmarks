let Submarine = memo function(x, y)
	@[
		_x: x,
		_y: y,
	]
end

let Forward = memo function(sub)
	@[
		_sub: sub,

		move: function(n)
			let s = Submarine(self._sub._x + n, self._sub._y)
			s
		end,
	]
end

let Up = memo function(sub)
	@[
		_sub: sub,

		move: function(n)
			let s = Submarine(self._sub._x, self._sub._y - n)
			s
		end,
	]
end

let Down = memo function(sub)
	@[
		_sub: sub,

		move: function(n)
			let s = Submarine(self._sub._x, self._sub._y + n)
			s
		end,
	]
end

function solve(input)
	let sub = Submarine(0, 0)
	for i in std.range(0, std.len(input) - 1, 1) do
		let line = input[i]
		let m = std.split(line, " ")
		let n = std.int(m[1])
		if m[0] == "forward" then
			sub = Forward(sub).move(n)
		else if m[0] == "up" then
			sub = Up(sub).move(n)
		else if m[0] == "down" then
			sub = Down(sub).move(n)
		end
	end
	sub._x * sub._y
end

let input = ${ cat input.txt }.stdout
std.println(solve(std.split(input, "\n")))
