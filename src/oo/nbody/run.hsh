#!/usr/bin/env hush

let args = std.args()
let util = std.import("../../util.hsh")

let OUTPUT = args[0]
{ mkdir -p $OUTPUT/nbody/output }

let PROGRAM = ${ readlink -fn nbody.hsh }.stdout
let DATA_DIR = ${ readlink -fn $OUTPUT/nbody }.stdout
let ARGS = [1000] # m x m matrix size

# Params for generating the inputs.
let MIN = 1
let MAX = 300
let STEP = 50

let inputs = []
for i in std.range(MIN, MAX, STEP) do
	std.push(inputs, i)
end

let cmd = [PROGRAM]
for a in std.iter(ARGS) do
	std.push(cmd, a)
end

if std.len(std.glob(DATA_DIR ++ "/output/*.out")) > 0 then
	{ rm $DATA_DIR/output/*.out }
end

util.run_benchmark(cmd, inputs, DATA_DIR, "uhush", "unsafe-memo")
#util.run_benchmark(cmd, inputs, DATA_DIR, "ghush", "guarded")
util.run_benchmark(cmd, inputs, DATA_DIR, "ahush", "alias-set")
util.run_benchmark(cmd, inputs, DATA_DIR, "ohush", "sop-memo")

cmd[0] = ${ readlink -fn nbody-nomemo.hsh }.stdout
util.run_benchmark(cmd, inputs, DATA_DIR, "hush", "original")
